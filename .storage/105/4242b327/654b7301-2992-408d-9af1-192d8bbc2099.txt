$ pwd
/data/chats/xpvnc/workspace/react_template
$ mkdir -p src/agent/tools/elasticsearch

$ cat > src/agent/tools/elasticsearch/ConsensusTool.js << 'EOL'
// src/agent/tools/elasticsearch/ConsensusTool.js

/**
 * ConsensusTool
 * 
 * Analyzes multiple generated query options, evaluates their quality,
 * and ranks them based on various criteria including precision, recall,
 * complexity, and performance implications.
 */
class ConsensusTool {
  constructor() {
    this.name = 'consensusAnalysis';
    this.description = 'Analyzes and ranks multiple query options to find the optimal approach';
  }

  /**
   * Execute the consensus analysis on multiple query options
   * 
   * @param {Object} params - Parameters for consensus analysis
   * @param {Array<Object>} params.queryOptions - Array of query options to evaluate
   * @param {Object} params.intent - The parsed user intent
   * @param {Object} params.schema - Schema information for context
   * @returns {Object} Ranked queries with explanations
   */
  async execute(params) {
    const { queryOptions = [], intent = {}, schema = {} } = params;
    
    if (!queryOptions || !Array.isArray(queryOptions) || queryOptions.length === 0) {
      throw new Error('No query options provided for analysis');
    }
    
    try {
      // Evaluate each query option
      const evaluatedQueries = queryOptions.map((option, index) => {
        const evaluation = this.evaluateQueryOption(option, intent, schema);
        return {
          id: `option_${index + 1}`,
          originalQuery: option,
          ...evaluation
        };
      });
      
      // Rank queries by overall score (descending)
      const rankedQueries = [...evaluatedQueries].sort((a, b) => {
        return b.overallScore - a.overallScore;
      });
      
      // Determine consensus approach and build response
      const result = {
        recommendedQuery: rankedQueries[0]?.originalQuery || null,
        recommendedQueryId: rankedQueries[0]?.id || null,
        evaluatedOptions: rankedQueries,
        consensusApproach: this.determineConsensusApproach(rankedQueries),
        reasoning: this.generateConsensusReasoning(rankedQueries),
        alternativeApproaches: this.extractAlternativeApproaches(rankedQueries)
      };
      
      return result;
    } catch (error) {
      console.error('Error in consensus analysis:', error);
      throw new Error(`Failed to analyze query options: ${error.message}`);
    }
  }
EOL

