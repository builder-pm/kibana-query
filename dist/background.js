console.log("Elasticsearch Query Helper background script loaded");chrome.runtime.onInstalled.addListener(()=>{console.log("Elasticsearch Query Helper Extension installed"),chrome.sidePanel.setPanelBehavior({openPanelOnActionClick:!0}).catch(t=>console.error("Error setting panel behavior:",t))});chrome.action.onClicked.addListener(async t=>{try{console.log("Action clicked, opening side panel for tab:",t.id),await chrome.sidePanel.open({tabId:t.id})}catch(c){console.error("Error opening side panel:",c)}});chrome.runtime.onMessage.addListener((t,c,e)=>{switch(console.log("Background received message:",t),t.type){case"OPEN_SIDE_PANEL":return chrome.sidePanel.open({tabId:t.tabId}).then(()=>e({success:!0})).catch(r=>e({success:!1,error:r.message})),!0;case"CLOSE_SIDE_PANEL":return chrome.sidePanel.close({tabId:t.tabId}).then(()=>e({success:!0})).catch(r=>e({success:!1,error:r.message})),!0;case"GET_ACTIVE_TAB":return chrome.tabs.query({active:!0,currentWindow:!0}).then(r=>e({success:!0,tab:r[0]})).catch(r=>e({success:!1,error:r.message})),!0;case"ELASTICSEARCH_QUERY":return n(t.payload).then(r=>e({success:!0,data:r})).catch(r=>e({success:!1,error:r.message})),!0;case"QUERY_FEEDBACK":return l(t.payload).then(()=>e({success:!0})).catch(r=>e({success:!1,error:r.message})),!0;case"STORAGE_GET":return chrome.storage.local.get(t.keys).then(r=>e({success:!0,data:r})).catch(r=>e({success:!1,error:r.message})),!0;case"STORAGE_SET":return chrome.storage.local.set(t.data).then(()=>e({success:!0})).catch(r=>e({success:!1,error:r.message})),!0;default:console.warn("Unknown message type:",t.type),e({success:!1,error:"Unknown message type"})}});chrome.tabs.onUpdated.addListener((t,c,e)=>{c.status==="complete"&&e.url&&console.log("Tab updated:",e.url)});async function n(t){try{const{query:c,clusterConfig:e,options:r}=t;return console.log("Executing Elasticsearch query:",c),console.log("Cluster config:",e),console.log("Options:",r),await new Promise(s=>setTimeout(s,1e3)),{query:c,results:{took:5,timed_out:!1,hits:{total:{value:150,relation:"eq"},max_score:1,hits:[{_index:"sample_index",_id:"1",_score:1,_source:{title:"Sample Elasticsearch Document",content:"This is a sample document matching your query",timestamp:new Date().toISOString()}},{_index:"sample_index",_id:"2",_score:.8,_source:{title:"Another Sample Document",content:"Another document that matches the search criteria",timestamp:new Date().toISOString()}}]}},executionTime:"125ms",cluster:(e==null?void 0:e.name)||"localhost"}}catch(c){throw console.error("Error executing Elasticsearch query:",c),new Error(`Query execution failed: ${c.message}`)}}async function l(t){try{const{queryId:c,feedback:e,comment:r}=t,o={queryId:c,feedback:e,comment:r,timestamp:Date.now(),id:`feedback_${Date.now()}_${Math.random().toString(36).substr(2,9)}`},a=(await chrome.storage.local.get(["queryFeedback"])).queryFeedback||[];return a.push(o),a.length>100&&a.splice(0,a.length-100),await chrome.storage.local.set({queryFeedback:a}),console.log("Query feedback stored:",o),o}catch(c){throw console.error("Error storing query feedback:",c),new Error(`Feedback storage failed: ${c.message}`)}}chrome.runtime.onStartup.addListener(()=>{console.log("Extension startup")});chrome.runtime.onSuspend.addListener(()=>{console.log("Extension suspending")});
